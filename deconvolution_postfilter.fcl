# include "opticaldetectormodules_dune.fcl"
# include "opticaldetectorservices_dune.fcl"
# include "DigitizerSPE.fcl"
#include "services_dune.fcl"
#include "Deconvolution.fcl"
#include "DecoAnalysis.fcl"



process_name: DecReco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "deconv_reco_hist_pf_4rms.root" }
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_info
                @table::dunefd_simulation_services
}

# DUNE FD 1x2x6 workspace geometry
services.Geometry: @local::dune10kt_1x2x6_v4_geo
#services.PhotonVisibilityService: @local::dune10kt_1x2x6_photonvisibilityservice

#source is now a root file
source:
{
module_type: RootInput
maxEvents:  -1        # Number of events to create
#specify from command line with -s or --source
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
   
   producers:
   {
      # photon detector reconstruction
      opdec:       @local::standard_deconvolution
      #opdecG1:     @local::deconvolution_G1
      #ophit:      @local::dunefd_ophit
      #opflash:    @local::dunefd_opflash
      rns:       { module_type: "RandomNumberSaver" }
   }

   analyzers:
   {
      opdecoana:    @local::standard_deco_analysis
      #opdecoanaG1:  @local::standard_deco_analysis
      #opflashana:  @local::dunefd_opflashana
   }
   
   
   #define the producer and filter modules for this path, order matters, 
   #filters reject all following items.  see lines starting physics.producers below
   simulate: [ opdec,  rns ] 
   analyzeIt:  [ opdecoana ]
   
   #define the output stream, there could be more than one if using filters 
   stream1:  [ out1 ]
   
   #trigger_paths is a keyword and contains the paths that modify the art::event, 
   #ie filters and producers
   #trigger_paths: [reco] 
   trigger_paths: [simulate]
   
   #end_paths is a keyword and contains the paths that do not modify the art::Event, 
   #ie analyzers and output streams.  these all run simultaneously
   end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
   out1:
   {
      module_type: RootOutput
      fileName:    "deconv_reco_gen_pf_4rms.root"
      #default file name, can override from command line with -o or --output
   }
}

physics.producers.opdec   .InputModule: "opdigi"
physics.producers.opdec   .ApplyPrefilter: false
physics.producers.opdec   .ApplyPostfilter: true
physics.producers.opdec   .ApplyPostBLCorrection: false
physics.producers.opdec   .WfmPostfilter.Cutoff: 2.8
physics.producers.opdec   .AutoScale: true
physics.producers.opdec   .LineNoiseRMS: 4

#physics.producers.opdecG1 .InputModule: "opdigi"
#physics.producers.opdecG1 .ApplyPrefilter: false
#physics.producers.opdecG1 .ApplyPostfilter: true
#physics.producers.opdecG1 .WfmPostfilter.Cutoff: 2.6
#physics.producers.opdecG1 .AutoScale: true
#physics.producers.opdecG1 .LineNoiseRMS: 4

#physics.analyzers.opdecoanaG1   .InputModule: "opdecG1"
#physics.producers.opdecsnr.OutputProduct: "snr"
#physics.producers.opdec.InputModule: digispe
#physics.producers.opdec.DigiDataColumn: 0
#physics.producers.opdec.DigiDataFile: "fbk_decon.txt"
#physics.producers.opdec.ApplyPrefilter: true
#physics.producers.opdec.WfmPrefilter.Cutoff: 2.0
#physics.producers.opdec.WfmFilter.Name: "Wiener"
